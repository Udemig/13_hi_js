// Js Dom ManipÃ¼lasyonlarÄ±

// Html'deki body'nin kapladÄ±ÄŸÄ± alanÄ±n javascript'deki karÅŸÄ±lÄ±ÄŸÄ± document'dir.Document iÃ§erisinde oluÅŸturulan elemanlara javascript kÄ±smÄ±ndan mÃ¼dahelelerde bulunabiliriz.Ã–r:menu butonuna tÄ±klanÄ±nca aside kÄ±smÄ± aÃ§Ä±lsÄ±n,kullanÄ±cÄ± kartÄ±na tÄ±klanÄ±nca detay sayfasÄ±na yÃ¶nlendirsin,...

// Javascript kÄ±smÄ±nda bir html elemanÄ±na mÃ¼dahelede bulunmak iÃ§in ilk olarak bu elemanlarÄ± javascript kÄ±smÄ±na Ã§ekmemiz gerekir.

// * Html'deki Elemanlara Javascript DosyasÄ±nda EriÅŸme

// 1-)document.getElementsByTagName(): Html kÄ±smÄ±ndaki elemanlarÄ± tag adÄ±na gÃ¶re javascript kÄ±smÄ±na Ã§ekmemizi saÄŸlar.ElemanÄ± javascript kÄ±smÄ±na Ã§ekmek iÃ§in metod yanÄ±ndaki () iÃ§erisinde "" leri arasÄ±nda etiket adÄ± yazÄ±lÄ±r.EriÅŸilen bu elemanÄ± javascript kÄ±smÄ±nda kullanabiliriz.Bu metot eriÅŸilen elemanlarÄ±n birden fazla olma ihtimalinden dolayÄ± bu elemanlarÄ± bir collection ÅŸeklinde dÃ¶ndÃ¼rÃ¼r.
const baÅŸlÄ±k1 = document.getElementsByTagName("h1");

// console.log(baÅŸlÄ±k1);

// 2-)document.getElementsByClassName(): Html kÄ±smÄ±ndaki elemanlara class adÄ±na gÃ¶re eriÅŸmemizi saÄŸlar.EriÅŸilen elemanlarÄ± ise bir collection ÅŸeklinde dÃ¶ndÃ¼rÃ¼r.

const baÅŸlÄ±k2 = document.getElementsByClassName("title-1");

// console.log(baÅŸlÄ±k2);

// 3-)document.getElementById(): Html kÄ±smÄ±ndaki elemanlara id'sine gÃ¶re eriÅŸmemizi saÄŸlar.Bu metod eriÅŸilen elemanlarÄ± getElementsByTagName ve getElementsByClassName metodlarÄ±ndan farklÄ± olarak bir collection ÅŸeklinde dÃ¶ndÃ¼rmez.

const baÅŸlÄ±k3 = document.getElementById("title-2");

// console.log(baÅŸlÄ±k3);

// 4-) document.querySelector():Bu metot ÅŸimdiye kadar gÃ¶rdÃ¼ÄŸÃ¼mÃ¼z tÃ¼m metotlarÄ±n gÃ¶revini tek baÅŸÄ±na yapar.Yani bir elemana tag adÄ±,class adÄ± ve id'sine gÃ¶re eriÅŸmemizi saÄŸlar.Fakat bu metot bir elemana class adÄ± ile eriÅŸiliyorsa bu class adÄ±nÄ±n baÅŸÄ±na ".";id'sine gÃ¶re eriÅŸiliyorsa bu id'nin baÅŸÄ±na "#" koymamÄ±zÄ± ister.Aksi halde ilgili elemanlarÄ± bulamaz.

const resim = document.querySelector(".image-1");

// console.log(resim);

const yazÄ± = document.querySelector("#text");

// console.log(yazÄ±);

// 5-) document.querySelectorAll(): document.querySelector() metodu ile birden fazla elemana bir anda eriÅŸemeyiz.Bunu yapmaya Ã§alÄ±ÅŸtÄ±ÄŸÄ±mÄ±zda ilk bulduÄŸu elemanÄ± alÄ±r ama diÄŸerlerini almaz.Bu sorunu document.querySelectorAll() metodu kullanarak Ã§Ã¶zebiliriz.document.querySelectorAll metodu birden fazla elemanÄ± bir dizi ÅŸeklinde geri dÃ¶ndÃ¼rÃ¼r.

const eleman = document.querySelectorAll(".wrapper");

// console.log(eleman);

// * Javascript DosyasÄ±nda Html ElemanlarÄ±na Still Verme

// ? Elemanlara Still Ã–zelliÄŸini Js DosyasÄ±nda  Verme

// yazÄ±.style.backgroundColor = "red";
// yazÄ±.style.fontSize = "50px";

// ? Elemanlara Still Ã–zelliklerini Css DosyasÄ±nda Verme
// Bir elemana ait html,css ve js kodlarÄ±nÄ±n en kolay ÅŸekilde yÃ¶netimi her kodun ayrÄ± ayrÄ± dosyalarda yazÄ±lmasÄ±dÄ±r.Yani html kodunu .html uzantÄ±lÄ± dosyada css kodunu .css uzantÄ±lÄ± dosyada ve js kodunuysa .js uzantÄ±lÄ± dosyada yazmalÄ±yÄ±z.

// Bir elemana ait class iÅŸlemlerini classList metodu sayesinde yaparÄ±z.Class ekleyebilir,class Ã§Ä±karabilir,class varmÄ± diye kontrol edebiliriz.

// ! Bir elemana javascript dosyasÄ±ndan class ekleme
yazÄ±.classList.add("yazÄ±-1");

const baÅŸlÄ±k4 = document.querySelector("#title-3");

// ! Bir elemanÄ±n classÄ±nÄ± javascript dosyasÄ±ndan kaldÄ±rma
baÅŸlÄ±k4.classList.remove("new-title");

// * Javascript ElemanlarÄ±n Html Ä°Ã§eriklerini Belirleme

// Html kÄ±smÄ±nda bulunan elemanlarÄ±n content'ini javascript dosyasÄ±nda dinamik ÅŸekilde belirleyebiliriz.

//? innerText:Bir elemanÄ±n yazÄ± iÃ§eriÄŸini belirlemek iÃ§in kullanÄ±lÄ±r.
baÅŸlÄ±k4.innerText = "Hello,world !!!";

//? innerHTML:Bir elemanÄ±n html iÃ§eriÄŸini belirlemek iÃ§in kullanÄ±lÄ±r.

yazÄ±.innerHTML = ` <p class='yazÄ±-1'>Lorem ipsum dolor sit amet consectetur adipisicing elit. Exercitationem maiores voluptatum molestiae perferendis. Neque distinctio eum nam cupiditate accusamus debitis sapiente! Sequi modi error impedit alias, eum nostrum unde maiores!</p>
 `;

const aÃ§Ä±klama = document.querySelector(".desc");

// ? textContent:Bir elemanÄ±n yazÄ± iÃ§eriÄŸini belirlemek iÃ§in kullanÄ±lÄ±r.
aÃ§Ä±klama.textContent = "Merhaba,nasÄ±lsÄ±n?Neredesin?";

// * Olay Ä°zleyicileri (Event Listeners):

// ArayÃ¼zdeki tÄ±klanma,sÃ¼rÃ¼klenme,... gibi olaylar neticesinde bir takÄ±m iÅŸlevleri tetiklemek istersek bunu eventListeners ile yapabiliriz.EventListeners hangi olayÄ±n izleneceÄŸi ve bu izlenen olay gerÃ§ekleÅŸince ne olacaÄŸÄ±nÄ± sÃ¶ylememizi ister.Ã–r: KullanÄ±cÄ± profil resmine tÄ±klayÄ±nca profil sekmesine yÃ¶nlendirsin

// Click
const uyarÄ±Butonu = document.querySelector("#alert-btn");

uyarÄ±Butonu.addEventListener("click", () => {
  alert("UyarÄ± butonuna tÄ±klandÄ±");
});

const sÃ¼rÃ¼klemeBaÅŸlÄ±ÄŸÄ± = document.querySelector(".draggable-title");

// Drag
const sÃ¼rÃ¼klemeFonksiyonu = () => {
  console.log("âœ… SÃ¼rÃ¼kleme baÅŸladÄ±");
};

sÃ¼rÃ¼klemeBaÅŸlÄ±ÄŸÄ±.addEventListener("dragstart", sÃ¼rÃ¼klemeFonksiyonu);

sÃ¼rÃ¼klemeBaÅŸlÄ±ÄŸÄ±.addEventListener("drag", () => {
  console.log("ğŸ“Œ SÃ¼rÃ¼kleniyor");
});

const form = document.querySelector("form");

// Submit
form.addEventListener("submit", (event) => {
  // Form'lar default Ã¶zellik olarak sayfa yeniler.Bu durumu engellemek iÃ§in tÃ¼m addEventListener'larÄ±n almÄ±ÅŸ olduÄŸu event parametresi kullanÄ±larak event.preventDefault() metodu kullanÄ±lÄ±r.
  event.preventDefault();

  // Event parametresi iÃ§erisinde yer alan target metodu ile bu olayÄ± tetikleyen elemana eriÅŸebiliriz.Bu Ã¶rnekte bir submit olayÄ± izleniyor.Submit olayÄ±nÄ± tetikleyen ise form.Bu sebeple event.target dersek ilgili forma eriÅŸiriz.Form iÃ§erisindeki elemanlarÄ± bir dizi ÅŸeklinde tuttuÄŸundan event.target[0],event.target[1],... ÅŸeklinde form iÃ§erisindeki elemanlara eriÅŸebiliriz.EriÅŸilen elemanÄ±n deÄŸerine ise event.target[0].value diyerek ulaÅŸabiliriz.
  console.log(event.target[0].value);
  console.log(event.target[1].value);

  // InputlarÄ±n iÃ§erisini sÄ±fÄ±rla-1 [InputlarÄ±n iÃ§erisini teker teker boÅŸ string'e Ã§ekme]
  //   event.target[0].value = "";
  //   event.target[1].value = "";

  // InputlarÄ±n iÃ§erisini sÄ±fÄ±rla-2 [Formu event parametresini kullanarak sÄ±fÄ±rlama]
  //   event.target.reset();

  // InputlarÄ±n iÃ§erisini sÄ±fÄ±rla-3 [Formu sÄ±fÄ±rlama]
  form.reset();
});

// todo: KullanÄ±cÄ± oluÅŸtur butonuna tÄ±klayÄ±nca arayÃ¼ze yeni bir div ekleyen Ã¶rneÄŸin code-script'ini oluÅŸturunuz.

// 1-) Html kÄ±smÄ±ndan buton ve container'a eriÅŸ
const createButton = document.querySelector("#create-btn");
const container = document.querySelector(".container");

// 2-) createElement fonksiyonunu oluÅŸtur
function createElement() {
  // i-)   Bir html elemanÄ± oluÅŸtur
  // ! document.createElementv ile bir html elemanÄ± oluÅŸturulur.Bu metot bizden hangi elemanÄ± oluÅŸturacaÄŸÄ±mÄ±zÄ± sÃ¶ylememizi ister.
  const yeniDiv = document.createElement("div");
  console.log(yeniDiv);

  // ii-)  OluÅŸturulan eleman'a class ekle
  yeniDiv.classList.add("new-child");
  // iii-) OluÅŸturulan elemanÄ±n yazÄ± iÃ§eriÄŸini belirle
  yeniDiv.textContent = "Yeni Div";
  // iv-)  OluÅŸturulan elemanÄ± container iÃ§erisine ekle
  // ! appendChild metodu ile bir elemanÄ± baÅŸka bir eleman iÃ§erisine ekleyebiliriz.
  container.appendChild(yeniDiv);
}

// 3-) Butona tÄ±klanma olayÄ±nÄ± izle ve createElement adÄ±ndaki fonksiyonu tetikle
createButton.addEventListener("click", createElement);

const temaButonu = document.querySelector("#theme-btn");
const example = document.querySelector(".example");

temaButonu.addEventListener("click", () => {
  example.classList.toggle("dark");
  // ! classList.toggle metodu ile bir elemana belirtilen class bu elemanda varsa bunu Ã§Ä±karÄ±r yoksa bunu ekler.
});

// todo: Bir tane tema butonu oluÅŸturun.Bu butona tÄ±klayÄ±nca websitesinde dark-light tema geÃ§iÅŸi saplansÄ±n.

const temaButon = document.querySelector(".tema-btn");

temaButon.addEventListener("click", () => {
  document.body.classList.toggle("dark-thema");
});

// * Javascript Class YapÄ±sÄ±

class KiÅŸi {
  // Class yapÄ±sÄ±nÄ±n kurucu metodu
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }

  isimYazdÄ±r() {
    console.log(`Merhaba,kiÅŸi adÄ±: ${this.name} `);
  }

  yaÅŸYazdÄ±r() {
    console.log(`Merhaba,kiÅŸi yaÅŸ: ${this.age} `);
  }

  toplamaÄ°ÅŸlemi(a, b) {
    console.log(`Toplam: ${a + b}`);
  }
}

const kiÅŸi = new KiÅŸi("Furkan", 40);

kiÅŸi.isimYazdÄ±r();
kiÅŸi.yaÅŸYazdÄ±r();

kiÅŸi.toplamaÄ°ÅŸlemi(2, 3);
